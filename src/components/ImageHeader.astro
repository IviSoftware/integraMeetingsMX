---
// ImageHeader.astro
const { imageUrl, text, title } = Astro.props;
import "animate.css";
---

<style>
  .header {
    background-size: cover;
    background-position: center;
    transition: transform 2s ease;
    height: 100vh;
    width: 100vw;
    filter: brightness(0.5);
  }

  .zoom {
    transform: scale(1.2);
  }

  .scroll-zoom {
    transform: scale(1);
  }

  .text-header {
    position: absolute;
    bottom: 25px;
    right: 0;
    padding: 16px;
    color: white;
    z-index: 10;
    width: 100%;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
  }

  .text-content {
    max-width: 950px;
  }

  .text-title {
    max-width: 1500px;
    margin-bottom: 30px;
  }

  @media screen and (min-width: 1024px) {
    .text-title {
      display: inline;
    }

    .text-header {
      align-items: end;
    }
  }
</style>

<div class="relative overflow-hidden">
  <div
    class="header zoom scroll-zoom"
    style={`background-image: url(${imageUrl});`}
  >
  </div>
  <div class="text-header">
    <h2
      class="text-title text-xl text-center md:text-right md:pr-6 lg:text-7xl font-bold mb-2 lg:mb-4 cssanimation sequence"
    >
      {title}
    </h2>
    <p
      class="text-content text-lg text-center md:text-right md:pr-6 lg:text-xl animate__animated animate__bounceInRight"
    >
      {text}
    </p>
  </div>
</div>

<script>
  window.addEventListener("load", () => {
    // Selecciona todos los headers y text-headers del DOM
    const headers: NodeListOf<HTMLElement> =
      document.querySelectorAll(".header");
    const textHeaders: NodeListOf<HTMLElement> =
      document.querySelectorAll(".text-header h2");

    // IntersectionObserver options
    const options: IntersectionObserverInit = {
      root: null, // Usar el viewport
      threshold: 0.1, // Trigger cuando el 10% del elemento es visible
    };

    // Callback para el observador
    const observerCallback: IntersectionObserverCallback = (entries) => {
      entries.forEach((entry) => {
        const header = entry.target as HTMLElement;
        const index = Array.from(headers).indexOf(header);
        const textHeader = textHeaders[index]; // Relaciona el header con el texto

        if (entry.isIntersecting) {
          console.log(`Header ${index + 1} es visible`);
          header.classList.remove("scroll-zoom");
          header.classList.add("zoom");
          textHeader.classList.add("leFadeInTop");
        } else {
          console.log(`Header ${index + 1} no es visible`);
          header.classList.add("scroll-zoom");
          textHeader.classList.remove("leFadeInTop");
        }
      });
    };

    // Crear un observador para cada header
    const observer = new IntersectionObserver(observerCallback, options);

    // Observa cada header
    headers.forEach((header) => observer.observe(header));
  });
</script>
